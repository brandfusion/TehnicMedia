@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Web;
@using Dynamicweb.Configuration;
@using Dynamicweb.Core;
@functions {
    public class Sticker
    {
        public string className { get; set; }
        public string text { get; set; }
    }
    public class Dealer
    {
        public string DealerName { get; set; }
    }
    public class Product
    {
        public string id { get; set; }
        public string name { get; set; }
        public string number { get; set; }
        public string price { get; set; }
        public string discount { get; set; }
        public string onSale { get; set; }
        public string link { get; set; }
        public string image { get; set; }
        public string noImage { get; set; }
        public bool afisarePromotie { get; set; }
        public double priceProductDB { get; set; }
        public List<Sticker> Stickers { get; set; }
        public string manufacturer { get; set; }
        public string manufacturerLink { get; set; }
        public List<Dealer> Dealers { get; set; }
        public string dealerResult { get; set; }
        public string idFormDetalii { get; set; }
        public string moneda { get; set; }
        public int discountPromotie { get; set; }
        public int pretRedus { get; set; }
        public bool showPromotie { get; set;}
        public bool produsPromovat { get; set; }
        public int pretIntreg { get; set; }
        public string dataExpirarePromotie { get; set; }
        public string valoareDiscount { get; set; }
    }
    public class Root
    {
        public List<Product> Product { get; set; }
    }
}
@{
    List<Root> feedObject = new List<Root>();
    List<Product> productFeedObject = new List<Product>();
    Root feedRoot = new Root();
    feedRoot.Product = new List<Product>();
    foreach (LoopItem product in GetLoop("Products"))
    {
        Product productObject = new Product();
        productObject.id = product.GetString("Ecom:Product.ID");
        productObject.name = product.GetString("Ecom:Product.Name");
        productObject.number = product.GetString("Ecom:Product.Number");
        productObject.discount = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Price.PriceFormatted") : "";
        productObject.price = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Discount.Price.PriceFormatted") : product.GetString("Ecom:Product.Price.PriceFormatted");
        productObject.onSale = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") == product.GetString("Ecom:Product.Price.PriceFormatted") ? "u-hidden" : "";
        productObject.link = "/" + product.GetString("Ecom:Product.LinkGroup.Clean") + (!String.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? "&VariantID=" + product.GetString("Ecom:Product.VariantID") : "");
        productObject.image = product.GetString("Ecom:Product.ImageLarge.Default.Clean");
        productObject.noImage = string.IsNullOrEmpty(product.GetString("Ecom:Product.ImageLarge.Default.Clean")) ? "u-hidden" : "";
        productObject.afisarePromotie = product.GetBoolean("Ecom:Product:Field.TagPromotie");
        productObject.priceProductDB = Math.Round(product.GetDouble("Ecom:Product.DBPrice"),2);
        productObject.manufacturer = product.GetString("Ecom:Manufacturer.Name");
        productObject.manufacturerLink = product.GetString("Ecom:Manufacturer.Web");
        
        string moneda = product.GetString("Ecom:Product:Field.MonedaPret");
        string ValoareDiscount = product.GetString("Ecom:Product:Field.ValoareDiscount");
        string PretIntreg = product.GetString("Ecom:Product:Field.PretIntreg");
        DateTime dataExpirarePromotie = product.GetDate("Ecom:Product:Field.DataExpirarePromotie");
        DateTime CurrentDate = DateTime.Now;
        int pretInteger;
        int discount;
        bool verificarePret = int.TryParse(PretIntreg, out pretInteger);
        bool verificareDiscount = int.TryParse(ValoareDiscount, out discount);
        int pretCuDiscount = pretInteger - ((pretInteger * discount)/100);
        bool showPromotie = dataExpirarePromotie > CurrentDate || dataExpirarePromotie == CurrentDate;
        productObject.showPromotie = showPromotie;
        productObject.produsPromovat = product.GetString("Ecom:Product:Field.ProdusPromovat") == "True";
        productObject.moneda = moneda;
        productObject.discountPromotie = discount;
        productObject.pretIntreg = pretInteger;
        productObject.pretRedus = pretCuDiscount;
        productObject.dataExpirarePromotie = dataExpirarePromotie.ToString("dd MMM yyyy");
        productObject.valoareDiscount = ValoareDiscount;
        
        productObject.Stickers = new List<Sticker>();
        string[] dealeriProdus = (product.GetString("Ecom:Product:Field.Dealeri") ?? "").Split(new [] { ',' }, StringSplitOptions.RemoveEmptyEntries);
        
        productObject.Dealers = new List<Dealer>();
        foreach (var dealer in dealeriProdus)
        {
            Dealer itemDealer = new Dealer();
            itemDealer.DealerName = dealer;
            productObject.Dealers.Add(itemDealer);
        }
        productObject.dealerResult = dealeriProdus.Length == 1 ? dealeriProdus[0] : dealeriProdus.Length.ToString();
        productObject.idFormDetalii = "120";
        feedRoot.Product.Add(productObject);
    }
    feedObject.Add(feedRoot);

    string jsonFeed = "";

    if (GetLoop("Products").Count == 0)
    {
        jsonFeed = "[]";
    }
    else
    {
        jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(feedObject);
    }
}
@jsonFeed
