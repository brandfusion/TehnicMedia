@inherits Dynamicweb.Rendering.RazorTemplateBase<Dynamicweb.Rendering.RazorTemplateModel<Dynamicweb.Rendering.Template>>
@using System.Web;
@using Dynamicweb.Configuration;
@using Dynamicweb.Core;
@functions {
    public class Sticker
    {
        public string className { get; set; }
        public string text { get; set; }
    }
    public class Dealer
    {
        public string DealerName { get; set; }
    }
    public class Product
    {
        public string id { get; set; }
        public string name { get; set; }
        public string number { get; set; }
        public string price { get; set; }
        public string discount { get; set; }
        public string onSale { get; set; }
        public string link { get; set; }
        public string image { get; set; }
        public string noImage { get; set; }
        public List<Sticker> Stickers { get; set; }
        public string manufacturer { get; set; }
        public List<Dealer> Dealers { get; set; }
        public string idFormDetalii { get; set; }
    }
}
@{
    List<Product> feedObject = new List<Product>();
    foreach (LoopItem product in GetLoop("Products"))
    {
        Product productObject = new Product();
        productObject.id = product.GetString("Ecom:Product.ID");
        productObject.name = product.GetString("Ecom:Product.Name");
        productObject.number = product.GetString("Ecom:Product.Number");
        productObject.discount = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Price.PriceFormatted") : "";
        productObject.price = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") != product.GetString("Ecom:Product.Price.PriceFormatted") ? product.GetString("Ecom:Product.Discount.Price.PriceFormatted") : product.GetString("Ecom:Product.Price.PriceFormatted");
        productObject.onSale = product.GetString("Ecom:Product.Discount.Price.PriceFormatted") == product.GetString("Ecom:Product.Price.PriceFormatted") ? "u-hidden" : "";
        productObject.link = "/" + product.GetString("Ecom:Product.LinkGroup.Clean") + (!String.IsNullOrEmpty(product.GetString("Ecom:Product.VariantID")) ? "&VariantID=" + product.GetString("Ecom:Product.VariantID") : "");
        productObject.image = product.GetString("Ecom:Product.ImageLarge.Default.Clean");
        productObject.noImage = string.IsNullOrEmpty(product.GetString("Ecom:Product.ImageLarge.Default.Clean")) ? "u-hidden" : "";
        productObject.manufacturer = product.GetString("Ecom:Manufacturer.Name");
        productObject.Stickers = new List<Sticker>();
        productObject.Dealers = new List<Dealer>();
        Dealer itemDealer = new Dealer();
        itemDealer.DealerName = product.GetString("Ecom:Product:Field.Dealeri");
        productObject.Dealers.Add(itemDealer);
        productObject.idFormDetalii = "120";
        feedObject.Add(productObject);
    }
    string jsonFeed = Newtonsoft.Json.JsonConvert.SerializeObject(feedObject);
}
@jsonFeed
